{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/bruno/Documentos/ignite/desafios/blogPrismic/src/pages/post/[slug].tsx\",\n    _s = $RefreshSig$();\n\nimport { FiClock, FiCalendar, FiUser } from 'react-icons/fi';\nimport Link from 'next/link';\nimport { RichText } from \"prismic-dom\";\nimport { format } from 'date-fns';\nimport ptBR from 'date-fns/locale/pt-BR';\nimport styles from './post.module.scss';\nimport { useRouter } from 'next/router';\nimport Comments from '../../components/Comments';\nexport var __N_SSG = true;\nexport default function Post(_ref) {\n  _s();\n\n  var _this = this;\n\n  var post = _ref.post,\n      preview = _ref.preview,\n      previousPost = _ref.previousPost,\n      nextPost = _ref.nextPost;\n  var router = useRouter();\n\n  if (router.isFallback) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Carregando...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  }\n\n  var publicatedAt = format(new Date(post.first_publication_date), 'dd MMM yyyy', {\n    locale: ptBR\n  });\n  var updatedAt = format(new Date(post.last_publication_date), 'dd MMM yyyy', {\n    locale: ptBR\n  });\n  var updatedAtHours = format(new Date(post.last_publication_date), \"kk:mm\", {\n    locale: ptBR\n  });\n  var wordsNumber = post.data.content.map(function (item) {\n    var text = RichText.asText(item.body);\n    var aux = [];\n    var arr = text.split(' ');\n    var arrConcat = aux.concat(arr).length;\n    return arrConcat;\n  });\n  var readTime = wordsNumber.reduce(function (acc, item) {\n    var total = acc + item;\n    var time = Math.ceil(total / 200);\n    return time;\n  }, 0);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.banner,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: post.data.banner.url,\n        alt: \"banner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: post.data.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(FiCalendar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), publicatedAt, /*#__PURE__*/_jsxDEV(FiUser, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), post.data.author, /*#__PURE__*/_jsxDEV(FiClock, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), readTime, \" min\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), updatedAt !== publicatedAt && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: styles.updatedAt,\n        children: [\"* editado em \", updatedAt, \", \\xE0s \", updatedAtHours]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this), post.data.content.map(function (item) {\n        return /*#__PURE__*/_jsxDEV(\"article\", {\n          className: styles.content,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: item.heading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            dangerouslySetInnerHTML: {\n              __html: RichText.asHtml(item.body)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, _this)]\n        }, item.heading, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, _this);\n      }), /*#__PURE__*/_jsxDEV(Comments, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), preview && /*#__PURE__*/_jsxDEV(\"aside\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          href: \"/api/exit-preview\",\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            children: \"Sair do modo Preview\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Post, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/home/bruno/Documentos/ignite/desafios/blogPrismic/src/pages/post/[slug].tsx"],"names":["FiClock","FiCalendar","FiUser","Link","RichText","format","ptBR","styles","useRouter","Comments","Post","post","preview","previousPost","nextPost","router","isFallback","publicatedAt","Date","first_publication_date","locale","updatedAt","last_publication_date","updatedAtHours","wordsNumber","data","content","map","item","text","asText","body","aux","arr","split","arrConcat","concat","length","readTime","reduce","acc","total","time","Math","ceil","banner","url","container","title","author","heading","__html","asHtml"],"mappings":"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","sourcesContent":["import { GetStaticPaths, GetStaticProps } from 'next';\nimport { FiClock, FiCalendar, FiUser } from 'react-icons/fi'\nimport Link from 'next/link'\n\nimport Prismic from '@prismicio/client'\nimport { getPrismicClient } from '../../services/prismic';\nimport { RichText } from \"prismic-dom\"\n\nimport { format } from 'date-fns'\nimport ptBR from 'date-fns/locale/pt-BR';\n\nimport styles from './post.module.scss';\nimport { useRouter } from 'next/router';\n\nimport Comments from '../../components/Comments'\nimport PostNavigator from '../../components/'\n\ninterface Post {\n  first_publication_date: string | null;\n  last_publication_date: string | null;\n  uid: string,\n  data: {\n    title: string;\n    banner: {\n      url: string | null\n    };\n    author: string;\n    content: {\n      heading: string;\n      body: {\n        text: string;\n      }[];\n    }[];\n  };\n}\n\ninterface PostProps {\n  post: Post;\n  previousPost?: {\n    uid: string;\n    title: string;\n  };\n  nextPost?: {\n    uid: string;\n    title: string;\n  };\n  preview: boolean\n}\n\nexport default function Post({ post, preview, previousPost, nextPost }: PostProps) {\n  const router = useRouter()\n\n  if (router.isFallback) {\n    return (\n      <h1>\n        Carregando...\n      </h1>\n    )\n  }\n\n  const publicatedAt = format(\n    new Date(post.first_publication_date),\n    'dd MMM yyyy',\n    {\n      locale: ptBR\n    }\n  )\n\n  const updatedAt = format(\n    new Date(post.last_publication_date),\n    'dd MMM yyyy',\n    {\n      locale: ptBR\n    }\n  )\n\n  const updatedAtHours = format(\n    new Date(post.last_publication_date),\n    \"kk:mm\",\n    {\n      locale: ptBR\n    }\n  )\n\n  const wordsNumber = post.data.content.map(item => {\n    const text = RichText.asText(item.body)\n    const aux = []\n    const arr = text.split(' ')\n    const arrConcat = aux.concat(arr).length\n    return arrConcat\n  })\n\n  const readTime = wordsNumber.reduce((acc, item) => {\n    const total = acc + item\n    const time = Math.ceil(total / 200)\n    return time\n  }, 0)\n\n  return (\n    <>\n      <div className={styles.banner}>\n        <img src={post.data.banner.url} alt=\"banner\" />\n      </div>\n      <main className={styles.container}>\n        <h1>{post.data.title}</h1>\n        <section>\n          <FiCalendar />\n          {publicatedAt}\n          <FiUser />\n          {post.data.author}\n          <FiClock />\n          {readTime} min\n        </section>\n        {updatedAt !== publicatedAt && (\n          <p className={styles.updatedAt}>\n            * editado em {updatedAt}, às {updatedAtHours}\n          </p>\n        )}\n        {post.data.content.map(item => {\n          return (\n            <article className={styles.content} key={item.heading}>\n              <h2>{item.heading}</h2>\n              <div dangerouslySetInnerHTML={{ __html: RichText.asHtml(item.body) }} />\n            </article>\n          )\n        })}\n       \n        <Comments />\n        {preview && (\n          <aside>\n            <Link href=\"/api/exit-preview\">\n              <a>Sair do modo Preview</a>\n            </Link>\n          </aside>\n        )}\n      </main>\n    </>\n  )\n}\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  const prismic = getPrismicClient();\n  const posts = await prismic.query([\n    Prismic.predicates.at('document.type', 'post')\n  ]);\n\n  const paths = posts.results.map(post => {\n    return {\n      params: {\n        slug: post.uid\n      }\n    }\n  })\n\n  return {\n    paths,\n    fallback: true\n  }\n};\n\nexport const getStaticProps: GetStaticProps = async ({\n  params,\n  preview = false,\n  previewData,\n}) => {\n  const prismic = getPrismicClient();\n  const { slug } = params\n  const response = await prismic.getByUID('post', String(slug), {\n    ref: previewData?.ref ?? null,\n  });\n  const post: Post = {\n    uid: response.uid,\n    first_publication_date: response.first_publication_date,\n    last_publication_date: response.last_publication_date,\n    data: {\n      title: response.data.title,\n      author: response.data.author,\n      banner: {\n        url: response.data.banner.url,\n      },\n      content: response.data.content.map(content => {\n        return {\n          heading: content.heading,\n          body: [...content.body]\n        }\n      })\n    },\n  }\n\n  let previousPost = null;\n  let nextPost = null;\n  const responsePreviousPost = await prismic.query(\n    [\n      Prismic.predicates.at('document.type', 'post'),\n      Prismic.predicates.dateAfter(\n        'document.first_publication_date',\n        post.first_publication_date\n      ),\n    ],\n    {\n      fetch: ['posts.title'],\n      pageSize: 1,\n      page: 1,\n    }\n  );\n\n  if (responsePreviousPost.results.length) {\n    previousPost = {\n      uid: responsePreviousPost.results[0].uid,\n      title: responsePreviousPost.results[0].data?.title,\n    };\n  }\n\n  const responseNextPost = await prismic.query(\n    [\n      Prismic.predicates.at('document.type', 'post'),\n      Prismic.predicates.dateBefore(\n        'document.first_publication_date',\n        post.first_publication_date\n      ),\n    ],\n    {\n      fetch: ['posts.title'],\n      pageSize: 1,\n      page: 1,\n    }\n  );\n\n  if (responseNextPost.results.length) {\n    nextPost = {\n      uid: responseNextPost.results[0].uid,\n      title: responseNextPost.results[0].data?.title,\n    };\n  }\n\n\n  return {\n    props: {\n      post,\n      prevPost: previousPost?.results,\n      nextPost: nextPost?.results,\n      preview\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}