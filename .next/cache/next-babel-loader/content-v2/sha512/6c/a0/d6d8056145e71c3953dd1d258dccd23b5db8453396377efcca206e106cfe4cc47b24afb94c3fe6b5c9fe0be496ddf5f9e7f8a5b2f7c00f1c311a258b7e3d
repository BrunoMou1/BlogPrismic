{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/bruno/Documentos/ignite/desafios/blogPrismic/src/pages/post/[slug].tsx\";\nimport { FiClock, FiCalendar, FiUser } from 'react-icons/fi';\nimport Link from 'next/link';\nimport Prismic from '@prismicio/client';\nimport { getPrismicClient } from '../../services/prismic';\nimport { RichText } from \"prismic-dom\";\nimport { format } from 'date-fns';\nimport ptBR from 'date-fns/locale/pt-BR';\nimport styles from './post.module.scss';\nimport { useRouter } from 'next/router';\nimport Comments from '../../components/Comments';\nimport { PostNavigator } from '../../components/PostNavigator/PostNavigator';\nexport default function Post({\n  post,\n  preview,\n  previousPost,\n  nextPost\n}) {\n  const router = useRouter();\n\n  if (router.isFallback) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Carregando...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  }\n\n  const publicatedAt = format(new Date(post.first_publication_date), 'dd MMM yyyy', {\n    locale: ptBR\n  });\n  const updatedAt = format(new Date(post.last_publication_date), 'dd MMM yyyy', {\n    locale: ptBR\n  });\n  const updatedAtHours = format(new Date(post.last_publication_date), \"kk:mm\", {\n    locale: ptBR\n  });\n  const wordsNumber = post.data.content.map(item => {\n    const text = RichText.asText(item.body);\n    const aux = [];\n    const arr = text.split(' ');\n    const arrConcat = aux.concat(arr).length;\n    return arrConcat;\n  });\n  const readTime = wordsNumber.reduce((acc, item) => {\n    const total = acc + item;\n    const time = Math.ceil(total / 200);\n    return time;\n  }, 0);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.banner,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: post.data.banner.url,\n        alt: \"banner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: post.data.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(FiCalendar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), publicatedAt, /*#__PURE__*/_jsxDEV(FiUser, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), post.data.author, /*#__PURE__*/_jsxDEV(FiClock, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), readTime, \" min\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), updatedAt !== publicatedAt && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: styles.updatedAt,\n        children: [\"* editado em \", updatedAt, \", \\xE0s \", updatedAtHours]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this), post.data.content.map(item => {\n        return /*#__PURE__*/_jsxDEV(\"article\", {\n          className: styles.content,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: item.heading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            dangerouslySetInnerHTML: {\n              __html: RichText.asHtml(item.body)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this)]\n        }, item.heading, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.wrapper\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PostNavigator, {\n        previous: previousPost,\n        next: nextPost\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Comments, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), preview && /*#__PURE__*/_jsxDEV(\"aside\", {\n        cl: true,\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          href: \"/api/exitPreview\",\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            children: \"Sair do modo Preview\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\nexport const getStaticPaths = async () => {\n  const prismic = getPrismicClient();\n  const posts = await prismic.query([Prismic.predicates.at('document.type', 'post')]);\n  const paths = posts.results.map(post => {\n    return {\n      params: {\n        slug: post.uid\n      }\n    };\n  });\n  return {\n    paths,\n    fallback: true\n  };\n};\nexport const getStaticProps = async ({\n  params,\n  preview = false,\n  previewData\n}) => {\n  var _previewData$ref;\n\n  const prismic = getPrismicClient();\n  const {\n    slug\n  } = params;\n  const response = await prismic.getByUID('post', String(slug), {\n    ref: (_previewData$ref = previewData === null || previewData === void 0 ? void 0 : previewData.ref) !== null && _previewData$ref !== void 0 ? _previewData$ref : null\n  });\n  const post = {\n    uid: response.uid,\n    first_publication_date: response.first_publication_date,\n    last_publication_date: response.last_publication_date,\n    data: {\n      title: response.data.title,\n      author: response.data.author,\n      banner: {\n        url: response.data.banner.url\n      },\n      content: response.data.content.map(content => {\n        return {\n          heading: content.heading,\n          body: [...content.body]\n        };\n      })\n    }\n  };\n  let previousPost = null;\n  let nextPost = null;\n  const responsePreviousPost = await prismic.query([Prismic.predicates.at('document.type', 'post'), Prismic.predicates.dateAfter('document.first_publication_date', post.first_publication_date)], {\n    fetch: ['posts.title'],\n    pageSize: 1,\n    page: 1\n  });\n\n  if (responsePreviousPost.results.length) {\n    var _responsePreviousPost;\n\n    previousPost = {\n      uid: responsePreviousPost.results[0].uid,\n      title: (_responsePreviousPost = responsePreviousPost.results[0].data) === null || _responsePreviousPost === void 0 ? void 0 : _responsePreviousPost.title\n    };\n  }\n\n  const responseNextPost = await prismic.query([Prismic.predicates.at('document.type', 'post'), Prismic.predicates.dateBefore('document.first_publication_date', post.first_publication_date)], {\n    fetch: ['posts.title'],\n    pageSize: 1,\n    page: 1\n  });\n\n  if (responseNextPost.results.length) {\n    var _responseNextPost$res;\n\n    nextPost = {\n      uid: responseNextPost.results[0].uid,\n      title: (_responseNextPost$res = responseNextPost.results[0].data) === null || _responseNextPost$res === void 0 ? void 0 : _responseNextPost$res.title\n    };\n  }\n\n  return {\n    props: {\n      post,\n      previousPost,\n      nextPost,\n      preview\n    }\n  };\n};","map":{"version":3,"sources":["/home/bruno/Documentos/ignite/desafios/blogPrismic/src/pages/post/[slug].tsx"],"names":["FiClock","FiCalendar","FiUser","Link","Prismic","getPrismicClient","RichText","format","ptBR","styles","useRouter","Comments","PostNavigator","Post","post","preview","previousPost","nextPost","router","isFallback","publicatedAt","Date","first_publication_date","locale","updatedAt","last_publication_date","updatedAtHours","wordsNumber","data","content","map","item","text","asText","body","aux","arr","split","arrConcat","concat","length","readTime","reduce","acc","total","time","Math","ceil","banner","url","container","title","author","heading","__html","asHtml","wrapper","getStaticPaths","prismic","posts","query","predicates","at","paths","results","params","slug","uid","fallback","getStaticProps","previewData","response","getByUID","String","ref","responsePreviousPost","dateAfter","fetch","pageSize","page","responseNextPost","dateBefore","props"],"mappings":"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","sourcesContent":["import { GetStaticPaths, GetStaticProps } from 'next';\nimport { FiClock, FiCalendar, FiUser } from 'react-icons/fi'\nimport Link from 'next/link'\n\nimport Prismic from '@prismicio/client'\nimport { getPrismicClient } from '../../services/prismic';\nimport { RichText } from \"prismic-dom\"\n\nimport { format } from 'date-fns'\nimport ptBR from 'date-fns/locale/pt-BR';\n\nimport styles from './post.module.scss';\nimport { useRouter } from 'next/router';\n\nimport Comments from '../../components/Comments'\nimport { PostNavigator } from '../../components/PostNavigator/PostNavigator'\n\ninterface Post {\n  first_publication_date: string | null;\n  last_publication_date: string | null;\n  uid: string,\n  data: {\n    title: string;\n    banner: {\n      url: string | null\n    };\n    author: string;\n    content: {\n      heading: string;\n      body: {\n        text: string;\n      }[];\n    }[];\n  };\n}\n\ninterface PostProps {\n  post: Post;\n  previousPost?: {\n    uid: string;\n    title: string;\n  };\n  nextPost?: {\n    uid: string;\n    title: string;\n  };\n  preview: boolean\n}\n\nexport default function Post({ post, preview, previousPost, nextPost }: PostProps) {\n  const router = useRouter()\n\n  if (router.isFallback) {\n    return (\n      <h1>\n        Carregando...\n      </h1>\n    )\n  }\n\n  const publicatedAt = format(\n    new Date(post.first_publication_date),\n    'dd MMM yyyy',\n    {\n      locale: ptBR\n    }\n  )\n\n  const updatedAt = format(\n    new Date(post.last_publication_date),\n    'dd MMM yyyy',\n    {\n      locale: ptBR\n    }\n  )\n\n  const updatedAtHours = format(\n    new Date(post.last_publication_date),\n    \"kk:mm\",\n    {\n      locale: ptBR\n    }\n  )\n\n  const wordsNumber = post.data.content.map(item => {\n    const text = RichText.asText(item.body)\n    const aux = []\n    const arr = text.split(' ')\n    const arrConcat = aux.concat(arr).length\n    return arrConcat\n  })\n\n  const readTime = wordsNumber.reduce((acc, item) => {\n    const total = acc + item\n    const time = Math.ceil(total / 200)\n    return time\n  }, 0)\n\n  return (\n    <>\n      <div className={styles.banner}>\n        <img src={post.data.banner.url} alt=\"banner\" />\n      </div>\n      <main className={styles.container}>\n        <h1>{post.data.title}</h1>\n        <section>\n          <FiCalendar />\n          {publicatedAt}\n          <FiUser />\n          {post.data.author}\n          <FiClock />\n          {readTime} min\n        </section>\n        {updatedAt !== publicatedAt && (\n          <p className={styles.updatedAt}>\n            * editado em {updatedAt}, às {updatedAtHours}\n          </p>\n        )}\n        {post.data.content.map(item => {\n          return (\n            <article className={styles.content} key={item.heading}>\n              <h2>{item.heading}</h2>\n              <div dangerouslySetInnerHTML={{ __html: RichText.asHtml(item.body) }} />\n            </article>\n          )\n        })}\n        <div className={styles.wrapper}/>\n        <PostNavigator previous={previousPost} next={nextPost} />\n        <Comments />\n        {preview && (\n          <aside cl>\n            <Link href=\"/api/exitPreview\">\n              <a>Sair do modo Preview</a>\n            </Link>\n          </aside>\n        )}\n      </main>\n    </>\n  )\n}\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  const prismic = getPrismicClient();\n  const posts = await prismic.query([\n    Prismic.predicates.at('document.type', 'post')\n  ]);\n\n  const paths = posts.results.map(post => {\n    return {\n      params: {\n        slug: post.uid\n      }\n    }\n  })\n\n  return {\n    paths,\n    fallback: true\n  }\n};\n\nexport const getStaticProps: GetStaticProps = async ({\n  params,\n  preview = false,\n  previewData,\n}) => {\n  const prismic = getPrismicClient();\n  const { slug } = params\n  const response = await prismic.getByUID('post', String(slug), {\n    ref: previewData?.ref ?? null,\n  });\n  const post: Post = {\n    uid: response.uid,\n    first_publication_date: response.first_publication_date,\n    last_publication_date: response.last_publication_date,\n    data: {\n      title: response.data.title,\n      author: response.data.author,\n      banner: {\n        url: response.data.banner.url,\n      },\n      content: response.data.content.map(content => {\n        return {\n          heading: content.heading,\n          body: [...content.body]\n        }\n      })\n    },\n  }\n\n  let previousPost = null;\n  let nextPost = null;\n  const responsePreviousPost = await prismic.query(\n    [\n      Prismic.predicates.at('document.type', 'post'),\n      Prismic.predicates.dateAfter(\n        'document.first_publication_date',\n        post.first_publication_date\n      ),\n    ],\n    {\n      fetch: ['posts.title'],\n      pageSize: 1,\n      page: 1,\n    }\n  );\n\n  if (responsePreviousPost.results.length) {\n    previousPost = {\n      uid: responsePreviousPost.results[0].uid,\n      title: responsePreviousPost.results[0].data?.title,\n    };\n  }\n\n  const responseNextPost = await prismic.query(\n    [\n      Prismic.predicates.at('document.type', 'post'),\n      Prismic.predicates.dateBefore(\n        'document.first_publication_date',\n        post.first_publication_date\n      ),\n    ],\n    {\n      fetch: ['posts.title'],\n      pageSize: 1,\n      page: 1,\n    }\n  );\n\n  if (responseNextPost.results.length) {\n    nextPost = {\n      uid: responseNextPost.results[0].uid,\n      title: responseNextPost.results[0].data?.title,\n    };\n  }\n\n\n  return {\n    props: {\n      post,\n      previousPost,\n      nextPost,\n      preview\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}