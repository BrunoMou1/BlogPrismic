{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport Link from 'next/link';\nimport { useState } from 'react';\nimport { FiUser, FiCalendar } from 'react-icons/fi';\nimport Prismic from '@prismicio/client';\nimport { getPrismicClient } from '../services/prismic';\nimport { format } from 'date-fns';\nimport ptBR from 'date-fns/locale/pt-BR';\nimport styles from './home.module.scss';\nexport default function Home({\n  postsPagination,\n  preview\n}) {\n  const {\n    0: posts,\n    1: setPosts\n  } = useState(postsPagination.results);\n  const {\n    0: nextPage,\n    1: setNextPage\n  } = useState(postsPagination.next_page);\n\n  async function handleClickLoadPost() {\n    if (nextPage === null) {\n      return;\n    }\n\n    const response = await fetch(`${nextPage}`).then(r => r.json());\n    const resultsNextPage = response.results.map(post => {\n      return {\n        uid: post.uid,\n        first_publication_date: post.first_publication_date,\n        data: {\n          title: post.data.title,\n          subtitle: post.data.subtitle,\n          author: post.data.author\n        }\n      };\n    });\n    setNextPage(response.next_page);\n    setPosts([...posts, ...resultsNextPage]);\n  }\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsxs(\"main\", {\n      className: styles.container,\n      children: [posts.map(post => /*#__PURE__*/_jsx(Link, {\n        href: `/post/${post.uid}`,\n        children: /*#__PURE__*/_jsxs(\"a\", {\n          children: [/*#__PURE__*/_jsx(\"h1\", {\n            children: post.data.title\n          }), /*#__PURE__*/_jsx(\"p\", {\n            children: post.data.subtitle\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsx(FiCalendar, {}), format(new Date(post.first_publication_date), 'dd MMM yyyy', {\n              locale: ptBR\n            }), /*#__PURE__*/_jsx(FiUser, {}), post.data.author]\n          })]\n        })\n      }, post.uid)), nextPage && /*#__PURE__*/_jsx(\"button\", {\n        type: \"button\",\n        onClick: handleClickLoadPost,\n        children: \"Carregar mais posts\"\n      }), preview && /*#__PURE__*/_jsx(\"aside\", {\n        className: styles.preview,\n        children: /*#__PURE__*/_jsx(Link, {\n          href: \"/api/exitPreview\",\n          children: /*#__PURE__*/_jsx(\"a\", {\n            children: \"Sair do modo Preview\"\n          })\n        })\n      })]\n    })\n  });\n}\nexport const getStaticProps = async ({\n  preview = false,\n  previewData\n}) => {\n  var _previewData$ref;\n\n  const prismic = getPrismicClient();\n  const postsResponse = await prismic.query([Prismic.predicates.at('document.type', 'post')], {\n    ref: (_previewData$ref = previewData === null || previewData === void 0 ? void 0 : previewData.ref) !== null && _previewData$ref !== void 0 ? _previewData$ref : null,\n    fetch: ['post.title', 'post.subtitle', 'post.author'],\n    pageSize: 1\n  });\n  const results = postsResponse.results.map(post => {\n    return {\n      uid: post.uid,\n      first_publication_date: post.first_publication_date,\n      data: {\n        title: post.data.title,\n        subtitle: post.data.subtitle,\n        author: post.data.author\n      }\n    };\n  });\n  const postsPagination = {\n    results,\n    next_page: postsResponse.next_page\n  };\n  return {\n    props: {\n      postsPagination,\n      preview\n    },\n    revalidate: 60 * 60 * 6 // 6 horas\n\n  };\n};","map":null,"metadata":{},"sourceType":"module"}