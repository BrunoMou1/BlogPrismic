{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/bruno/Documentos/ignite/desafios/blogPrismic/src/pages/index.tsx\";\nimport Link from 'next/link';\nimport { useState } from 'react';\nimport { FiUser, FiCalendar } from 'react-icons/fi';\nimport Prismic from '@prismicio/client';\nimport { getPrismicClient } from '../services/prismic';\nimport { format } from 'date-fns';\nimport ptBR from 'date-fns/locale/pt-BR';\nimport styles from './home.module.scss';\nexport default function Home({\n  postsPagination,\n  preview\n}) {\n  const {\n    0: posts,\n    1: setPosts\n  } = useState(postsPagination.results);\n  const {\n    0: nextPage,\n    1: setNextPage\n  } = useState(postsPagination.next_page);\n\n  async function handleClickLoadPost() {\n    if (nextPage === null) {\n      return;\n    }\n\n    const response = await fetch(`${nextPage}`).then(r => r.json());\n    const resultsNextPage = response.results.map(post => {\n      return {\n        uid: post.uid,\n        first_publication_date: post.first_publication_date,\n        data: {\n          title: post.data.title,\n          subtitle: post.data.subtitle,\n          author: post.data.author\n        }\n      };\n    });\n    setNextPage(response.next_page);\n    setPosts([...posts, ...resultsNextPage]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: styles.container,\n      children: [posts.map(post => /*#__PURE__*/_jsxDEV(Link, {\n        href: `/post/${post.uid}`,\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: post.data.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: post.data.subtitle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(FiCalendar, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 17\n            }, this), format(new Date(post.first_publication_date), 'dd MMM yyyy', {\n              locale: ptBR\n            }), /*#__PURE__*/_jsxDEV(FiUser, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 17\n            }, this), post.data.author]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this)\n      }, post.uid, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)), nextPage && /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleClickLoadPost,\n        children: \"Carregar mais posts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), preview && /*#__PURE__*/_jsxDEV(\"aside\", {\n        className: styles.preview,\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          href: \"/api/exitPreview\",\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            children: \"Sair do modo Preview\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\nexport const getStaticProps = async ({\n  preview = false,\n  previewData\n}) => {\n  var _previewData$ref;\n\n  const prismic = getPrismicClient();\n  const postsResponse = await prismic.query([Prismic.predicates.at('document.type', 'post')], {\n    ref: (_previewData$ref = previewData === null || previewData === void 0 ? void 0 : previewData.ref) !== null && _previewData$ref !== void 0 ? _previewData$ref : null,\n    fetch: ['post.title', 'post.subtitle', 'post.author'],\n    pageSize: 1\n  });\n  const results = postsResponse.results.map(post => {\n    return {\n      uid: post.uid,\n      first_publication_date: post.first_publication_date,\n      data: {\n        title: post.data.title,\n        subtitle: post.data.subtitle,\n        author: post.data.author\n      }\n    };\n  });\n  const postsPagination = {\n    results,\n    next_page: postsResponse.next_page\n  };\n  return {\n    props: {\n      postsPagination,\n      preview\n    },\n    revalidate: 60 * 60 * 6 // 6 horas\n\n  };\n};","map":{"version":3,"sources":["/home/bruno/Documentos/ignite/desafios/blogPrismic/src/pages/index.tsx"],"names":["Link","useState","FiUser","FiCalendar","Prismic","getPrismicClient","format","ptBR","styles","Home","postsPagination","preview","posts","setPosts","results","nextPage","setNextPage","next_page","handleClickLoadPost","response","fetch","then","r","json","resultsNextPage","map","post","uid","first_publication_date","data","title","subtitle","author","container","Date","locale","getStaticProps","previewData","prismic","postsResponse","query","predicates","at","ref","pageSize","props","revalidate"],"mappings":"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","sourcesContent":["import { GetStaticProps } from 'next';\nimport Link from 'next/link'\nimport { useState } from 'react';\nimport { FiUser, FiCalendar } from 'react-icons/fi'\n\nimport Prismic from '@prismicio/client'\nimport { getPrismicClient } from '../services/prismic';\n\nimport { format } from 'date-fns'\nimport ptBR from 'date-fns/locale/pt-BR';\n\nimport styles from './home.module.scss';\n\ninterface Post {\n  uid?: string;\n  first_publication_date: string | null;\n  data: {\n    title: string;\n    subtitle: string;\n    author: string;\n  };\n}\n\ninterface PostPagination {\n  next_page: string;\n  results: Post[];\n}\n\ninterface HomeProps {\n  preview: boolean\n  postsPagination: PostPagination;\n}\n\nexport default function Home({ postsPagination, preview }: HomeProps) {\n\n  const [posts, setPosts] = useState(postsPagination.results)\n  const [nextPage, setNextPage] = useState(postsPagination.next_page)\n\n  async function handleClickLoadPost() {\n    if (nextPage === null) {\n      return\n    }\n\n    const response = await fetch(`${nextPage}`).then(r => r.json())\n\n    const resultsNextPage = response.results.map(post => {\n      return {\n        uid: post.uid,\n        first_publication_date: post.first_publication_date,\n        data: {\n          title: post.data.title,\n          subtitle: post.data.subtitle,\n          author: post.data.author\n        }\n      }\n    })\n\n    setNextPage(response.next_page)\n    setPosts([...posts, ...resultsNextPage])\n\n  }\n\n  return (\n    <>\n      <main className={styles.container}>\n        {posts.map(post => (\n          <Link key={post.uid} href={`/post/${post.uid}`} >\n            <a>\n              <h1>{post.data.title}</h1>\n              <p>{post.data.subtitle}</p>\n              <div>\n                <FiCalendar />\n                {format(\n                  new Date(post.first_publication_date),\n                  'dd MMM yyyy',\n                  {\n                    locale: ptBR\n                  }\n                )}\n                <FiUser />\n                {post.data.author}\n              </div>\n            </a>\n          </Link>\n        ))}\n        {nextPage && (\n          <button\n            type='button'\n            onClick={handleClickLoadPost}\n          >\n            Carregar mais posts\n          </button>)}\n        {preview && (\n          <aside className={styles.preview}>\n            <Link href=\"/api/exitPreview\">\n              <a>Sair do modo Preview</a>\n            </Link>\n          </aside>\n        )}\n      </main>\n    </>\n  )\n}\n\nexport const getStaticProps: GetStaticProps = async ({\n  preview = false,\n  previewData,\n}) => {\n  const prismic = getPrismicClient();\n\n  const postsResponse = await prismic.query([\n    Prismic.predicates.at('document.type', 'post')\n  ], {\n    ref: previewData?.ref ?? null,\n    fetch: ['post.title', 'post.subtitle', 'post.author'],\n    pageSize: 1\n  });\n\n  const results = postsResponse.results.map(post => {\n    return {\n      uid: post.uid,\n      first_publication_date: post.first_publication_date,\n      data: {\n        title: post.data.title,\n        subtitle: post.data.subtitle,\n        author: post.data.author\n      }\n    }\n  })\n\n  const postsPagination = {\n    results,\n    next_page: postsResponse.next_page\n  }\n\n  return {\n    props: {\n      postsPagination,\n      preview\n    },\n    revalidate: 60 * 60 * 6 // 6 horas\n  }\n\n};\n"]},"metadata":{},"sourceType":"module"}