{"ast":null,"code":"import { getPrismicClient } from '../../services/prismic';\n\nfunction linkResolver(doc) {\n  if (doc.type === 'posts') {\n    return `/post/${doc.uid}`;\n  }\n\n  return '/';\n}\n\nexport default (async (req, res) => {\n  const {\n    token: ref,\n    documentId\n  } = req.query;\n  const redirectUrl = await getPrismicClient(req).getPreviewResolver(String(ref), String(documentId)).resolve(linkResolver, '/');\n\n  if (!redirectUrl) {\n    return res.status(401).json({\n      message: 'Invalid token'\n    });\n  }\n\n  res.setPreviewData({\n    ref\n  });\n  res.write(`<!DOCTYPE html><html><head><meta http-equiv=\"Refresh\" content=\"0; url=${redirectUrl}\" />\n    <script>window.location.href = '${redirectUrl}'</script>\n    </head>`);\n  res.end();\n});","map":{"version":3,"sources":["/home/bruno/Documentos/ignite/desafios/blogPrismic/src/pages/api/preview.ts"],"names":["getPrismicClient","linkResolver","doc","type","uid","req","res","token","ref","documentId","query","redirectUrl","getPreviewResolver","String","resolve","status","json","message","setPreviewData","write","end"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,wBAAjC;;AAIA,SAASC,YAAT,CAAsBC,GAAtB,EAA6C;AAC3C,MAAIA,GAAG,CAACC,IAAJ,KAAa,OAAjB,EAA0B;AACxB,WAAQ,SAAQD,GAAG,CAACE,GAAI,EAAxB;AACD;;AACD,SAAO,GAAP;AACD;;AACD,gBAAe,OAAOC,GAAP,EAA4BC,GAA5B,KAAqD;AAClE,QAAM;AAAEC,IAAAA,KAAK,EAAEC,GAAT;AAAcC,IAAAA;AAAd,MAA6BJ,GAAG,CAACK,KAAvC;AACA,QAAMC,WAAW,GAAG,MAAMX,gBAAgB,CAACK,GAAD,CAAhB,CACvBO,kBADuB,CACJC,MAAM,CAACL,GAAD,CADF,EACSK,MAAM,CAACJ,UAAD,CADf,EAEvBK,OAFuB,CAEfb,YAFe,EAED,GAFC,CAA1B;;AAIA,MAAI,CAACU,WAAL,EAAkB;AAChB,WAAOL,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB,CAAP;AACD;;AAEDX,EAAAA,GAAG,CAACY,cAAJ,CAAmB;AAAEV,IAAAA;AAAF,GAAnB;AAEAF,EAAAA,GAAG,CAACa,KAAJ,CACG,yEAAwER,WAAY;AACzF,sCAAsCA,WAAY;AAClD,YAHE;AAKAL,EAAAA,GAAG,CAACc,GAAJ;AACD,CAlBD","sourcesContent":["import { getPrismicClient } from '../../services/prismic'\nimport { Document } from '@prismicio/client/types/documents';\nimport { NextApiRequest, NextApiResponse } from 'next';\n\nfunction linkResolver(doc: Document): string {\n  if (doc.type === 'posts') {\n    return `/post/${doc.uid}`;\n  }\n  return '/';\n}\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\n  const { token: ref, documentId } = req.query;\n  const redirectUrl = await getPrismicClient(req)\n    .getPreviewResolver(String(ref), String(documentId))\n    .resolve(linkResolver, '/');\n\n  if (!redirectUrl) {\n    return res.status(401).json({ message: 'Invalid token' });\n  }\n\n  res.setPreviewData({ ref });\n\n  res.write(\n    `<!DOCTYPE html><html><head><meta http-equiv=\"Refresh\" content=\"0; url=${redirectUrl}\" />\n    <script>window.location.href = '${redirectUrl}'</script>\n    </head>`\n  );\n  res.end();\n};"]},"metadata":{},"sourceType":"module"}